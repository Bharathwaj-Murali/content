[MODEL: dataset=cisco_asa_raw]
config case_sensitive = true
| alter
    event_id = to_integer(arrayindex(regextract(_raw_log, "ASA\-\d\-(\d+)\:"),0)),
    priority = arrayindex(regextract(_raw_log, "\<(\d+)\>"),0),
    severity = arrayindex(regextract(_raw_log, "\%ASA\-(\d)\-\d+\:\s"),0),
    message = arrayindex(regextract(_raw_log, "\%ASA\-\d\-\d+\:\s(.*)"),0),
//direction = arrayindex(regextract(_raw_log,"Built\s+([A-Za-z]+)\s+[A-Z]+\s+connection"),0),// the field not exits on data model network
    duration = arrayindex(regextract(_raw_log,"duration\s*(\d+\:\d+\:\d+)\s*"),0), // not have function in xql to change it to milliseconds
    bytes = arrayindex(regextract(_raw_log,"bytes\s*(\d+)\s+"),0),
    threat_level = arrayindex(regextract(_raw_log,"threat-level\:\s*([^\,]+)\,"),0)
// Action
| alter action1 = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\s([a-zA-Z]+[\s|\-][a-zA-Z]{2,}\s+[a-zA-Z\s]{3,})"),0),
    action2 = arrayindex(regextract(_raw_log ,"([a-zA-Z]{3,}\s[a-zA-Z]{3,}\s[a-zA-Z\s]{3,})\.*$"),0),
    action3 = arrayindex(regextract(_raw_log ,"\d+\-\d+\:\s\[([A-Za-z\s]+)\]"),0)
| alter action = coalesce(action1 ,action2, action3)
// host ip
| alter host_ip1 = arrayindex(regextract(_raw_log ,"\s*IP\s\<(\d+\.\d+\.\d+\.\d+)\>[\s|\,]"),0),
    host_ip2 = arrayindex(regextract(_raw_log ,"\s*[IP|server]\s*\=\s*(\d+\.\d+\.\d+\.\d+)\s*"),0),
    host_ip3 = arrayindex(regextract(_raw_log ,"\sIP\:\s*(\d+\.\d+\.\d+\.\d+)\,"),0),
    host_ip4 = arrayindex(regextract(_raw_log ,"\sIP\saddress\:\s*(\d+\.\d+\.\d+\.\d+)\,"),0),
    host_ip5 = arrayindex(regextract(_raw_log ,"\sserver\s*(\d+\.\d+\.\d+\.\d+)\s*"),0),
    host_ip6 = arrayindex(regextract(_raw_log ,"\sfrom\s*(\d+\.\d+\.\d+\.\d+)\s*"),0),
    host_ip7 = arrayindex(regextract(_raw_log ,"\sconfiguration\:\s*(\d+\.\d+\.\d+\.\d+)\s*"),0),
    host_ip8 = arrayindex(regextract(_raw_log ,"\saddress\s*(\d+\.\d+\.\d+\.\d+)\s*"),0)
| alter host_ip = coalesce(host_ip1 , host_ip2 , host_ip3 , host_ip4 , host_ip5 ,host_ip6 , host_ip7 , host_ip8 )
// user_name
| alter user_name1 = arrayindex(regextract(_raw_log ,"[U|u]ser\s+[\"\']([^\"^\']+)[\"\']"),0),
    user_name2 = arrayindex(regextract(_raw_log ,"\sUser\s\<([^\>]+)\>[\s|,]"),0),
    user_name3 = arrayindex(regextract(_raw_log ,"\s[U|u]ser[name]*\s*\=\s*([a-zA-Z0-9\-\_\.\@]+)"),0),
    user_name4 = arrayindex(regextract(_raw_log ,"\sUname:\s*(\S+)\s*"),0),
    user_name5 = arrayindex(regextract(_raw_log ,"\sfor\suser\s([a-zA-Z0-9\_\-\.\@]+)\s*"),0),
    user_name6 = arrayindex(regextract(_raw_log ,"\sUser\s([a-zA-Z0-9\-\_\.\@]+)\,"),0)
| alter user_name = coalesce(user_name1 , user_name2, user_name3 , user_name4 , user_name5 , user_name6)
// protocol
| alter protocol1 = arrayindex(regextract(_raw_log,"prot\=([A-Z]{2,})"),0),
    protocol2 = arrayindex(regextract(_raw_log,"\:\s*[A-Za-z]*\s+[A-Z]*[a-z]+\s+([A-Z]+)\s+connection"),0),
    protocol3 = uppercase(arrayindex(regextract(_raw_log ,"\sprotocol\=([a-zA-Z]+)"),0))
| alter protocol = coalesce(protocol1, protocol2, protocol3 )
// duration
| alter duration_string = arrayindex(regextract(latest_1 ,"[D|d]uration\:*\s+([a-z0-9\:]+)[\s|\,]"),0)
| alter duration_split = split(duration_string ,":")
// duration parts
| alter duration_part_0 = arrayindex(duration_split,0),
    duration_part_1 = arrayindex(duration_split,1),
    duration_part_2 = arrayindex(duration_split,2)
| alter duration_part_0_millis = if(duration_part_0 contains "h", multiply( to_number(arrayindex(regextract(duration_part_0 ,"\d+"),0)),3600000),duration_part_0 contains "m", multiply( to_number(arrayindex(regextract(duration_part_0 ,"\d+"),0)),60000) ,duration_part_0 contains "s", multiply( to_number(arrayindex(regextract(duration_part_0 ,"\d+"),0)),1000) ,0),
    duration_part_1_millis = if(duration_part_1 contains "h", multiply( to_number(arrayindex(regextract(duration_part_1 ,"\d+"),0)),3600000),duration_part_1 contains "m", multiply( to_number(arrayindex(regextract(duration_part_1 ,"\d+"),0)),60000) ,duration_part_1 contains "s", multiply( to_number(arrayindex(regextract(duration_part_1 ,"\d+"),0)),1000) ,0),
    duration_part_2_millis = if(duration_part_2 contains "h", multiply( to_number(arrayindex(regextract(duration_part_2 ,"\d+"),0)),3600000),duration_part_2 contains "m", multiply( to_number(arrayindex(regextract(duration_part_2 ,"\d+"),0)),60000) ,duration_part_2 contains "s", multiply( to_number(arrayindex(regextract(duration_part_2 ,"\d+"),0)),1000) ,0)
| alter duration = add(add(duration_part_0_millis , duration_part_1_millis ),duration_part_2_millis)
// hostname
| alter hostname = arrayindex(regextract(_raw_log ,"\d{2}\:\d{2}\:\d{2}\s*[-|+]*[\d\:]*\s*([A-Za-z0-9\-]+)\s"),0)
// send bytes
| alter bytes1 = arrayindex(regextract(latest_1 ,"\d{2}\:\d{2}\sbytes\s(\d+)\s"),0),
    bytes2 = arrayindex(regextract(latest_1 ,"Bytes\sxmt\:\s(\d+)\,"),0),
    bytes3  = arrayindex(regextract(latest_1 ,"packet\s(\d+)\sbytes"),0),
    bytes4  = arrayindex(regextract(latest_1 ,"size\s\=\s(\d+)\sbytes"),0),
    bytes5 = arrayindex(regextract(latest_1 ,"\,\sBytes\:\s(\d+)"),0)
| alter bytes = to_integer(coalesce(bytes1 , bytes2 , bytes3 , bytes4 ))
// ------------------------------ create source/dest ip/port/interface part ---------------------------------
//option 1
// <source_ip>/<source_port> to <dest_ip>/<dest_port>
| alter
    source_ip1 = arrayindex(regextract(_raw_log,"(\d+\.\d+\.\d+\.\d+)\/\d+\s*to\s*\d+\.\d+\.\d+\.\d+"),0),
    source_port1 = arrayindex(regextract(_raw_log,"\d+\.\d+\.\d+\.\d+\/(\d+)\s*to\s*\d+\.\d+\.\d+\.\d+"),0),
    dest_ip1 = arrayindex(regextract(_raw_log,"to\s*(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    dest_port1 = arrayindex(regextract(_raw_log,"to\s*\d+\.\d+\.\d+\.\d+\/(\d+)"),0)
//option 2
// from|for <source_interface>:<source_ip>/<source_port> to <dest_interface>:<dest_ip>:<dest_port>
| alter
    source_ip2 = arrayindex(regextract(_raw_log,"\w+\s*[a-zA-Z0-9-_]+\:\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/*\d*\s*to\s*"),0),
    source_port2 = arrayindex(regextract(_raw_log,"\w+\s*[a-zA-Z0-9-_]+\:\s*\d+\.\d+\.\d+\.\d+\/(\d+)\s*to\s*"),0),
    dest_ip2 = arrayindex(regextract(_raw_log,"\s*to\s*[a-zA-Z0-9-_]+\:(\d+\.\d+\.\d+\.\d+)\/*[a-zA-Z0-9]+"),0), // same on option 2,3,4
    dest_port2 = arrayindex(regextract(_raw_log,"\s*to\s*[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/+([a-zA-Z0-9]+)"),0),// same on option 2,3,4
    source_interface2 = arrayindex(regextract(_raw_log,"([a-zA-Z0-9-_]+)\:\s*\d+\.\d+\.\d+\.\d+\/\d+\s*to"),0),
    dest_interface2 = arrayindex(regextract(_raw_log,"\s*to\s*([a-zA-Z0-9-_]+)\:\d+\.\d+\.\d+\.\d+\/+[a-zA-Z0-9]+"),0)// same on option 2,3,4
//option 3
// for <interface>:<source_ip>/<source_port> (<mapped_ip>/<mapped_port>) to <dest_ip>/<dest_port>
// dest_ip, dest_port, dest_interface on option 3 is the same as option 2,4,5
| alter
    source_ip3 = arrayindex(regextract(_raw_log,"[a-zA-Z0-9-_]+\:\s*(\d+\.\d+\.\d+\.\d+)\/\d+\s*\([^\)]+\)\s*\(*[^\)]*\)*\s*to"),0),
    source_port3 = arrayindex(regextract(_raw_log,"[a-zA-Z0-9-_]+\:\s*\d+\.\d+\.\d+\.\d+\/(\d+)\s*\([^\)]+\)\s*\s*\(*[^\)]*\)*\s*to"),0),
    source_interface3 = arrayindex(regextract(_raw_log,"([a-zA-Z0-9-_]+)\:\s*\d+\.\d+\.\d+\.\d+\/\d+\s*\([^\)]+\)\s*\(*[^\)]*\)*\s*toto"),0),
    source_mapped_ip = arrayindex(regextract(_raw_log,"\d+\.\d+\.\d+\.\d+\/\d+\s*\((\d+\.\d+\.\d+\.\d+)\/\d+\)\s*to"),0),
    source_mapped_port = arrayindex(regextract(_raw_log,"\d+\.\d+\.\d+\.\d+\/\d+\s*\(\d+\.\d+\.\d+\.\d+\/(\d+)\)\s*to"),0),
    dest_ip3 = arrayindex(regextract(_raw_log,"to\s*[a-zA-Z0-9-_]+\:(\d+\.\d+\.\d+\.\d+)\/\d+\s*"),0),
    dest_port3 = arrayindex(regextract(_raw_log,"to\s*[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/(\d+)\s*"),0),
    dest_interface3 = arrayindex(regextract(_raw_log,"to\s*([a-zA-Z0-9-_]+)\:\d+\.\d+\.\d+\.\d+\/\d+\s*"),0),
    dest_mapped_ip = arrayindex(regextract(_raw_log,"to\s*[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\s*\((\d+\.\d+\.\d+\.\d+)\/"),0),
    dest_mapped_port = arrayindex(regextract(_raw_log,"to\s*[a-zA-Z0-9-_]+\:\d+\.\d+\.\d+\.\d+\/\d+\s*\([^\/]+\/(\d+)\)"),0)
//option 4
//from <source_ip>/<source_port> to <interface>:<source_ip>/<source_port>
| alter
    source_ip4 = arrayindex(regextract(_raw_log,"from\s*(\d+\.\d+\.\d+\.\d+)\/\d+\s*to"),0),
    source_port4 = arrayindex(regextract(_raw_log,"from\s*\d+\.\d+\.\d+\.\d+\/(\d+)\s*to"),0)
// option 5
// <interface>/<source_ip>(<source_port>) -> <interface>/<dest_ip>(<dest_port>)
| alter
    source_ip5 = arrayindex(regextract(_raw_log,"[a-zA-Z0-9-_]+\/(\d+\.\d+\.\d+\.\d+)\(\d+\)\s*\-\>"),0),
    source_port5 = arrayindex(regextract(_raw_log,"[a-zA-Z0-9-_]+\/\d+\.\d+\.\d+\.\d+\((\d+)\)\s*\-\>"),0),
    dest_interface5 = arrayindex(regextract(_raw_log,"([a-zA-Z0-9-_]+)\/\d+\.\d+\.\d+\.\d+\(\d+\)\s*\-\>"),0),
    dest_ip5 = arrayindex(regextract(_raw_log,"\s*\-\>\s[a-zA-Z0-9-_]+\/(\d+\.\d+\.\d+\.\d+)\(\d+\)"),0),
    dest_port5 = arrayindex(regextract(_raw_log,"\s*\-\>\s[a-zA-Z0-9-_]+\/\d+\.\d+\.\d+\.\d+\((\d+)\)"),0)
// option 6
// src = <source_ip>, dest = <dest_ip>
| alter
    source_ip6 = arrayindex(regextract(_raw_log,"src\s*\=\s*(\d+\.\d+\.\d+\.\d+)"),0),
    dest_ip6 = arrayindex(regextract(_raw_log,"dest\s*\=\s*(\d+\.\d+\.\d+\.\d+)"),0)
// option 7
// src <source_ip>/<source_port> dst <dest_ip>/<dest_port>
| alter
    source_ip7 = arrayindex(regextract(_raw_log,"src\s*(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    source_port7 = arrayindex(regextract(_raw_log,"src\s*\d+\.\d+\.\d+\.\d+\/(\d+)"),0),
    dest_ip7 = arrayindex(regextract(_raw_log,"dst\s*(\d+\.\d+\.\d+\.\d+)\/\d+"),0),
    dest_port7 = arrayindex(regextract(_raw_log,"dst\s*\d+\.\d+\.\d+\.\d+\/(\d+)"),0)
// option 8
// from <source_ip> to <dest_ip>
| alter source_ip8 = arrayindex(regextract(_raw_log ,"\sfrom\s(\d+\.\d+\.\d+\.\d+)\sto\s\d+\.\d+\.\d+\.\d+\s"),0)
    ,dest_ip8 = arrayindex(regextract(_raw_log ,"\sfrom\s\d+\.\d+\.\d+\.\d+\sto\s(\d+\.\d+\.\d+\.\d+)\s"),0)
// option 9
//, dest_addr=<dest_ip>, src_addr=<source_ip>
| alter source_ip9 = arrayindex(regextract(_raw_log ,"\,\ssrc_addr\=(\d+\.\d+\.\d+\.\d+)\,"),0)
    ,dest_ip9 = arrayindex(regextract(_raw_log ,"\,\sdest_addr\=(\d+\.\d+\.\d+\.\d+)\,"),0)
// option 10
//src <direction>:<source_ip> dst <direction>:<dest_ip>
| alter source_ip10 = arrayindex(regextract(_raw_log ,"\ssrc\s[a-zA-Z]+\:(\d+\.\d+\.\d+\.\d+)\sdst\s"),0)
    ,dest_ip10 = arrayindex(regextract(_raw_log ,"\ssrc\s[a-zA-Z]+\:\d+\.\d+\.\d+\.\d+\sdst\s[a-zA-Z]+\:(\d+\.\d+\.\d+\.\d+)"),0)
// option 11
// from <source_ip> to <dest_ip>
| alter source_ip11 = arrayindex(regextract(_raw_log ,"\sfrom\s(\d+\.\d+\.\d+\.\d+) to \d+\.\d+\.\d+\.\d+"),0)
    ,dest_ip11 = arrayindex(regextract(_raw_log ,"\sfrom\s\d+\.\d+\.\d+\.\d+ to (\d+\.\d+\.\d+\.\d+)"),0)
// option 12
// faddr <source_ip>/<source_port> to laddr <dest_ip>
| alter source_ip12 = arrayindex(regextract(_raw_log ,"for\s+faddr\s+(\d+\.\d+\.\d+\.\d+)\/\d+\s+to\s+"),0),
    dest_ip12 = arrayindex(regextract(_raw_log ,"\s+to\s+laddr\s(\d+\.\d+\.\d+\.\d+)"),0)
// option 13
// from laddr <source_ip> on interface <interface>> to <dest_ip>
| alter source_ip13 = arrayindex(regextract(_raw_log ,"\s+from\s+laddr\s+(\d+\.\d+\.\d+\.\d+)\s+on"),0),
    dest_ip13 = arrayindex(regextract(_raw_log ,"\s+from\s+laddr\s+\d+\.\d+\.\d+\.\d+\s+on\s+\w+\s\w+\sto\s+(\d+\.\d+\.\d+\.\d+)"),0)
// merge the fields
| alter
    source_ip = coalesce(source_ip1, source_ip2, source_ip3, source_ip4, source_ip5, source_ip6, source_ip7, source_ip8, source_ip9, source_ip10, source_ip11, source_ip12, source_ip13),
    source_port = coalesce(source_port1, source_port2, source_port3, source_port4, source_port5, source_port7),
    source_interface = coalesce(source_interface2, source_interface3),
    dest_ip = coalesce(dest_ip1, dest_ip2, dest_ip3, dest_ip5, dest_ip6, dest_ip7, dest_ip8, dest_ip9, dest_ip10, dest_ip11, dest_ip12, dest_ip13),
    dest_port = coalesce(dest_port1, dest_port2, dest_port3, dest_port5, dest_port7),
    dest_interface = coalesce(dest_interface2, dest_interface3, dest_interface5)
// ------------------------------ end source/dest ip/port/interface part ---------------------------------
| alter xdm.network.ip_protocol = if(proto="0",XDM_CONST.IP_PROTOCOL_HOPOPT, proto="1",XDM_CONST.IP_PROTOCOL_ICMP, proto="2",XDM_CONST.IP_PROTOCOL_IGMP, proto="3",XDM_CONST.IP_PROTOCOL_GGP, proto="4",XDM_CONST.IP_PROTOCOL_IP, proto="5",XDM_CONST.IP_PROTOCOL_ST, proto="6",XDM_CONST.IP_PROTOCOL_TCP, proto="7",XDM_CONST.IP_PROTOCOL_CBT, proto="8",XDM_CONST.IP_PROTOCOL_EGP, proto="9",XDM_CONST.IP_PROTOCOL_IGP, proto="10",XDM_CONST.IP_PROTOCOL_BBN_RCC_MON, proto="11",XDM_CONST.IP_PROTOCOL_NVP_II, proto="12",XDM_CONST.IP_PROTOCOL_PUP, proto="13",XDM_CONST.IP_PROTOCOL_ARGUS, proto="14",XDM_CONST.IP_PROTOCOL_EMCON, proto="15",XDM_CONST.IP_PROTOCOL_XNET, proto="16",XDM_CONST.IP_PROTOCOL_CHAOS, proto="17",XDM_CONST.IP_PROTOCOL_UDP, proto="18",XDM_CONST.IP_PROTOCOL_MUX, proto="19",XDM_CONST.IP_PROTOCOL_DCN_MEAS, proto="20",XDM_CONST.IP_PROTOCOL_HMP, proto="21",XDM_CONST.IP_PROTOCOL_PRM, proto="22",XDM_CONST.IP_PROTOCOL_XNS_IDP, proto="23",XDM_CONST.IP_PROTOCOL_TRUNK_1, proto="24",XDM_CONST.IP_PROTOCOL_TRUNK_2, proto="25",XDM_CONST.IP_PROTOCOL_LEAF_1, proto="26",XDM_CONST.IP_PROTOCOL_LEAF_2, proto="27",XDM_CONST.IP_PROTOCOL_RDP, proto="28",XDM_CONST.IP_PROTOCOL_IRTP, proto="29",XDM_CONST.IP_PROTOCOL_ISO_TP4, proto="30",XDM_CONST.IP_PROTOCOL_NETBLT, proto="31",XDM_CONST.IP_PROTOCOL_MFE_NSP, proto="32",XDM_CONST.IP_PROTOCOL_MERIT_INP, proto="33",XDM_CONST.IP_PROTOCOL_DCCP, proto="34",XDM_CONST.IP_PROTOCOL_3PC, proto="35",XDM_CONST.IP_PROTOCOL_IDPR, proto="36",XDM_CONST.IP_PROTOCOL_XTP, proto="37",XDM_CONST.IP_PROTOCOL_DDP, proto="38",XDM_CONST.IP_PROTOCOL_IDPR_CMTP, proto="39",XDM_CONST.IP_PROTOCOL_TP, proto="40",XDM_CONST.IP_PROTOCOL_IL, proto="41",XDM_CONST.IP_PROTOCOL_IPV6, proto="42",XDM_CONST.IP_PROTOCOL_SDRP, proto="43",XDM_CONST.IP_PROTOCOL_IPV6_ROUTE, proto="44",XDM_CONST.IP_PROTOCOL_IPV6_FRAG, proto="45",XDM_CONST.IP_PROTOCOL_IDRP, proto="46",XDM_CONST.IP_PROTOCOL_RSVP, proto="47",XDM_CONST.IP_PROTOCOL_GRE, proto="48",XDM_CONST.IP_PROTOCOL_DSR, proto="49",XDM_CONST.IP_PROTOCOL_BNA, proto="50",XDM_CONST.IP_PROTOCOL_ESP, proto="51",XDM_CONST.IP_PROTOCOL_AH, proto="52",XDM_CONST.IP_PROTOCOL_I_NLSP, proto="53",XDM_CONST.IP_PROTOCOL_SWIPE, proto="54",XDM_CONST.IP_PROTOCOL_NARP, proto="55",XDM_CONST.IP_PROTOCOL_MOBILE, proto="56",XDM_CONST.IP_PROTOCOL_TLSP, proto="57",XDM_CONST.IP_PROTOCOL_SKIP, proto="58",XDM_CONST.IP_PROTOCOL_IPV6_ICMP, proto="59",XDM_CONST.IP_PROTOCOL_IPV6_NONXT, proto="60",XDM_CONST.IP_PROTOCOL_IPV6_OPTS, proto="62",XDM_CONST.IP_PROTOCOL_CFTP, proto="64",XDM_CONST.IP_PROTOCOL_SAT_EXPAK, proto="65",XDM_CONST.IP_PROTOCOL_KRYPTOLAN, proto="66",XDM_CONST.IP_PROTOCOL_RVD, proto="67",XDM_CONST.IP_PROTOCOL_IPPC, proto="69",XDM_CONST.IP_PROTOCOL_SAT_MON, proto="70",XDM_CONST.IP_PROTOCOL_VISA, proto="71",XDM_CONST.IP_PROTOCOL_IPCV, proto="72",XDM_CONST.IP_PROTOCOL_CPNX, proto="73",XDM_CONST.IP_PROTOCOL_CPHB, proto="74",XDM_CONST.IP_PROTOCOL_WSN, proto="75",XDM_CONST.IP_PROTOCOL_PVP, proto="76",XDM_CONST.IP_PROTOCOL_BR_SAT_MON, proto="77",XDM_CONST.IP_PROTOCOL_SUN_ND, proto="78",XDM_CONST.IP_PROTOCOL_WB_MON, proto="79",XDM_CONST.IP_PROTOCOL_WB_EXPAK, proto="80",XDM_CONST.IP_PROTOCOL_ISO_IP, proto="81",XDM_CONST.IP_PROTOCOL_VMTP, proto="82",XDM_CONST.IP_PROTOCOL_SECURE_VMTP, proto="83",XDM_CONST.IP_PROTOCOL_VINES, proto="84",XDM_CONST.IP_PROTOCOL_TTP, proto="85",XDM_CONST.IP_PROTOCOL_NSFNET_IGP, proto="86",XDM_CONST.IP_PROTOCOL_DGP, proto="87",XDM_CONST.IP_PROTOCOL_TCF, proto="88",XDM_CONST.IP_PROTOCOL_EIGRP, proto="89",XDM_CONST.IP_PROTOCOL_OSPFIGP, proto="90",XDM_CONST.IP_PROTOCOL_SPRITE_RPC, proto="91",XDM_CONST.IP_PROTOCOL_LARP, proto="92",XDM_CONST.IP_PROTOCOL_MTP, proto="93",XDM_CONST.IP_PROTOCOL_AX25, proto="94",XDM_CONST.IP_PROTOCOL_IPIP, proto="95",XDM_CONST.IP_PROTOCOL_MICP, proto="96",XDM_CONST.IP_PROTOCOL_SCC_SP, proto="97",XDM_CONST.IP_PROTOCOL_ETHERIP, proto="98",XDM_CONST.IP_PROTOCOL_ENCAP, proto="100",XDM_CONST.IP_PROTOCOL_GMTP, proto="101",XDM_CONST.IP_PROTOCOL_IFMP, proto="102",XDM_CONST.IP_PROTOCOL_PNNI, proto="103",XDM_CONST.IP_PROTOCOL_PIM, proto="104",XDM_CONST.IP_PROTOCOL_ARIS, proto="105",XDM_CONST.IP_PROTOCOL_SCPS, proto="106",XDM_CONST.IP_PROTOCOL_QNX, proto="107",XDM_CONST.IP_PROTOCOL_AN, proto="108",XDM_CONST.IP_PROTOCOL_IPCOMP, proto="109",XDM_CONST.IP_PROTOCOL_S, proto="110",XDM_CONST.IP_PROTOCOL_COMPAQ_PEER, proto="111",XDM_CONST.IP_PROTOCOL_IPX_IN_IP, proto="112",XDM_CONST.IP_PROTOCOL_VRRP, proto="113",XDM_CONST.IP_PROTOCOL_PGM, proto="115",XDM_CONST.IP_PROTOCOL_L2TP, proto="116",XDM_CONST.IP_PROTOCOL_DDX, proto="117",XDM_CONST.IP_PROTOCOL_IATP, proto="118",XDM_CONST.IP_PROTOCOL_STP, proto="120",XDM_CONST.IP_PROTOCOL_SRP, proto="121",XDM_CONST.IP_PROTOCOL_UTI, proto="122",XDM_CONST.IP_PROTOCOL_SMP, proto="123",XDM_CONST.IP_PROTOCOL_SM, proto="124",XDM_CONST.IP_PROTOCOL_PTP, proto="125",XDM_CONST.IP_PROTOCOL_ISIS, proto="126",XDM_CONST.IP_PROTOCOL_FIRE, proto="127",XDM_CONST.IP_PROTOCOL_CRTP, proto="128",XDM_CONST.IP_PROTOCOL_CRUDP, proto="129",XDM_CONST.IP_PROTOCOL_SSCOPMCE, proto="130",XDM_CONST.IP_PROTOCOL_IPLT, proto="131",XDM_CONST.IP_PROTOCOL_SPS, proto="132",XDM_CONST.IP_PROTOCOL_PIPE, proto="133",XDM_CONST.IP_PROTOCOL_SCTP, proto="134",XDM_CONST.IP_PROTOCOL_FC, proto="135",XDM_CONST.IP_PROTOCOL_RSVP_E2E_IGNORE, proto="136",XDM_CONST.IP_PROTOCOL_MOBILITY, proto="137",XDM_CONST.IP_PROTOCOL_UDPLITE, proto="138",XDM_CONST.IP_PROTOCOL_MPLS_IN_IP,to_string(proto)),
| alter
    xdm.event.id = to_string(event_id),
    xdm.event.description = message,
    xdm.alert.severity = severity,
    xdm.source.ipv4 = coalesce(source_ip,host_ip),
    xdm.source.port = to_number(source_port),
    xdm.source.interface = source_interface,
    xdm.source.zone = source_interface,
    xdm.source.sent_bytes = to_number(bytes),
    xdm.target.ipv4 = dest_ip,
    xdm.target.port = to_number(dest_port),
    xdm.source.interface = source_interface,
    xdm.target.zone = dest_interface,
    xdm.source.user.username = user_name,
    xdm.event.outcome_reason = action
    xdm.event.duration = duration
    xdm.observer.name = hostname
    xdm.source.sent_bytes = bytes;